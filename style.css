@charset "UTF-8";

.s-page-1 .s-section-1 .s-section {
  width: 100%;
  height: 700vh;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1; /* 背景エフェクトを最背面に配置 */
}

html {
  font-size: 62.5%;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

header.header {
  display: flex;
  align-items: center; /* 縦方向の中央揃え */
  justify-content: center; /* 横方向の中央揃え */
  position: relative;
  z-index: 1;
}

/* 全体のリセットと基本的な設定 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html,
body {
  height: 100%;
  font-family: "Garamond", "Palatino Linotype", "Times New Roman", serif;
  line-height: 1.6;
   margin: 0; /* デフォルトのbodyマージンを削除 */
  padding: 0; /* デフォルトのbodyパディングを削除 */
  overflow-x: hidden; /* 小さい画面での水平スクロールバーを防ぐ */
}

/* 全体のレイアウト */
/* 一般的なベストプラクティス */
* {
  box-sizing: border-box; /* パディングとボーダーが要素の合計幅/高さに含まれるようにする */
}



/* menu-button */
.menu-button {
  text-decoration: none;
  color: #333;
  padding: 1vw 1.5vw; /* パディングにビューポート単位を使用 */
  font-size: 3vw; /* ビューポート幅に対するフォントサイズを調整 */
  font-size: 50px; /* オプション: 非常に大きな画面でのフォントサイズの最大値を設定 */
  border-radius: 5px;
  display: block;
  opacity: 0.4;
  margin-right: 100px;
}

/* 左サイドバー */
.sidebar-left {
  position: absolute;
  top: 50%; /* 50% top と transform を使用して垂直方向中央に配置 */
  left: 3vw; /* ビューポート幅に対する左位置を調整 */
  transform: translateY(-50%);
  writing-mode: vertical-rl;
  text-orientation: mixed;
  font-size: 1.5em; /* 親要素のフォントサイズに対するemを維持 */
  color: #555;
  letter-spacing: 0.2em;
  z-index: 50;
}

/* メインコンテンツラッパー */
.main-content-wrapper {
  display: flex;
  flex-direction: row; /* 大きい画面ではデフォルトで横並び */
  width: 100%;
  height: 100vh; /* 全体の高さにビューポートの高さを使用 */
  overflow: auto; /* コンテンツがオーバーフローした場合にスクロールを許可 */
  margin-right: 200px;
}

/* 左パネル */
.left-panel {
  flex: 3;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 0 5vw 0 15vw; /* パディングをビューポート単位で調整 */
  text-align: left;
  margin-right: 100px;
}

.left-panel h1 {
  font-size: 3.5em; /* emを維持、left-panelのフォントサイズに対する相対値 */
  margin-bottom: 3vw; /* マージンをビューポート単位で調整 */
  color: #555;
  font-family: "Cormorant Garamond", serif;
  font-weight: 300;
  margin-top: 10vw; /* マージンをビューポート単位で調整、600pxよりも控えめに */
  word-spacing: 5px;
  text-decoration: none;
  text-align: left;
 
}

.description-line1,
.description-line2 {
  font-size: 1.8em; /* 様々な画面でのフローを良くするために少し小さく */
  line-height: 1.6; /* 可読性のための行高さを調整 */
  word-spacing: 0.5vw; /* 単語間隔にビューポート単位を使用 */
  color: #555;
  font-family: "Cormorant Garamond", serif;
  margin-bottom: 2vw;
  text-decoration: none;
  text-align: left;
}
.description-line2 {
    margin-top: 2vw; /* マージンをビューポート単位で調整 */
}


.ginger-illustration {
  width: 100%; /* 画像をレスポンシブにする */
  height: auto;
  display: block;
  max-width: 500px; /* 品質のための最大幅を制限 */
  margin-top: 5vw; /* マージンを調整 */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* 右パネル */
.right-panel {
  flex: 2;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: flex-end;
  padding-left: 5vw; /* パディングを調整 */
  padding-right: 3vw; /* 一貫した右パディング */
  position: relative; 
}



.carousel-image {
  width: 100%;
  height: auto;
  display: block;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Brand and Category Info */
.brand-info,
.category-info,
.category-info1 {
  position: fixed; 
  bottom: 10px;/* これらの要素を固定位置に保つ */
 right:20px;
  z-index: 100;
}


.brand-info {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  margin-bottom: auto;
  text-align: center;
  z-index: 10;
}

.category-info .category-title {
  font-family: serif;
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 5px;
  color: #000000; /* ★重要: 文字色を純粋な黒に変更 */
}

.category-info .category {
  font-size: 0.9rem;
  line-height: 1.5;
  margin: 0;
  color: #000000; /* ★重要: 文字色を純粋な黒に変更 */
}
/* ... 前回のCSSコードは省略せずにそのまま貼り付け ... */

/* 新しく追加するCSS */

/* カルーセルコンテナ */
.carousel-container {
  max-width: 350px; /* 例: 最大幅を400ピクセルに制限 */
  /* もし右パネルが狭すぎる場合は、右パネルのflex比率や全体の幅も考慮が必要です */
  position: absolute;
  top:0; /* 親要素 (.right-panel) の上端から300px下に配置 */
  left: 20%;
  max-height: 600px;
  height: 600vh;
 /* カルーセルコンテナの幅の50%の位置から開始 */
  transform: translateX(-50%); /* 自身の幅の半分だけ左にずらし、完璧に中央配置 */
  display: flex; /* 子要素（.dot）を横並びにする */
  justify-content: center; /* ドットを水平方向の中央に配置 */
  align-items: center; /* ドットを垂直方向の中央に配置（必要に応じて） */
  width: 100%; /* 親要素（.carousel-container）の幅いっぱいに広げ、中央寄せを可能にする */
  gap: 12px; /* 各ドット間の間隔 */
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

}

.carousel-track {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.carousel-image {

  width: 100%;
  height: 100%;
  max-height: auto;
  object-fit: cover; /* または contain */
  /* ★追加・変更ここから★ */
  object-position: left center; /* 画像のコンテンツをコンテナ内で右寄せ、上下中央に配置 */
  /* object-position: right top;   // 右寄せ、上寄せ */
  /* object-position: right bottom; // 右寄せ、下寄せ */
  /* object-position: 100% 50%; // パーセンテージで指定することも可能 (右端、中央) */
  /* ★追加・変更ここまで★ */
  opacity: 0;
  transition: opacity 2.4s ease-in-out;
}

.carousel-image.active {
  opacity: 1;
}
.carousel-dots {
   /* ★重要★ .right-panel を基準に絶対配x置する */
  position: absolute;
  
   /* ドットをカルーセル画像の「下」に配置する例 */
   /* .carousel-container の bottom が 50px なので、それよりもさらに下に配置 */
   bottom:  7%; /* .right-panel の下端からの距離。調整して、画像からの距離を微調整できます */
   left:    -40px; /* .right-panel の水平方向中央に揃える */
   transform: translateX(-50%); /* 自身の幅の半分だけ左にずらし、完璧に中央配置 */
   overflow: hidden;
   /* ドットをカルーセル画像の「右横」に配置する例（試したい場合） */
   /* right: 0px; */ /* .right-panel の右端に揃える */
   /* top: 50%; */ /* .right-panel の垂直方向中央に揃える */
   /* transform: translateY(-50%); */ /* 自身の高さの半分だけ上にずらし、完璧に中央配置 */
 
   display: flex; /* 子要素（.dot）を横並びにする */
   justify-content: left; /* ドットを水平方向の中央に配置 */
   align-items: left; /* ドットを垂直方向の中央に配置（必要に応じて） */
   width: auto; /* ★重要★ ドットの数に合わせて幅が自動調整されるようにする */
   padding: 5px 10px; /* ドットの周りに少し余白が欲しい場合 */
   /* background-color: rgba(255, 255, 255, 0.8); */ /* 背景色を付けて視認性向上 */
   border-radius: 5px; /* 角を丸める */
   z-index: 70; /* ★重要★ 他の要素（特にカルーセル画像やブランド情報）より手前に表示されるように、高めの値を設定 */
   gap: 12px;
}

.dot {
  
  width: 12px; /* ドットのサイズ */
  height: 12px;
  background-color: #bbb; /* 非アクティブなドットの色 */
  border-radius: 50%; /* 完全な円にする */
  margin: 0 5px; /* ドット間のスペース */
  cursor: pointer;
  position: relative; /* ::before 疑似要素の基準点とする */
 /* ローディングのアニメーションがはみ出さないように */
  display: inline-block; /* text-alignなどで中央寄せできるように */
  z-index: 100;
}

.dot.active {
  background-color: #555; /* アクティブなドットの色 */
}

/* ローディングアニメーション用の円 */
.dot.active::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 2px solid #fff; /* 円の色 (ドットの色と区別するために白など) */
  border-right-color: transparent; /* 右側だけ透明にして回転させる */
  border-bottom-color: transparent; /* 下側も透明にする */
  animation: dot-loading 8.5s linear forwards; /* アニメーション定義: 5秒かけて一周 (画像の切り替え時間と合わせる) */
  box-sizing: border-box; /* border を width/height に含める */
}

@keyframes dot-loading {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}



.book-icon-container {
  width: 20px;
  background-color: rgb(0, 0, 0); /* アイコンの背景が透明であることを示すためのボックス */
  border-radius: 12px;
 
  text-align: right;
margin-left: 50px;

}

/* SVGアイコンのスタイル */
.book-icon {
  position: fixed;
  margin-top: -40px;
  text-decoration: none;
  color: #333;
  font-size: 1.1em;
  right:105px;
  top:-30px;
  border-radius: 5px;
  display: flex; /* アイコンとテキストを横並びにするため */
  align-items: right;
  gap: 8px; /* アイコンとテキストの間隔 */
  width: 50px;
font-size: 2em;
  cursor: pointer; /* ホバーでポインター表示 */
  
  /* SVG内部の線の色を設定 (currentColorを使用しないため、直接指定) */
  fill: #000000; /* 塗りつぶしの色（今回はパスなので線色に影響）*/
  stroke: #000000; /* 線の色（SVG内のstroke属性を上書き）*/
  transition: fill 0.3s ease-in-out, stroke 0.3s ease-in-out, transform 0.3s ease-in-out;
  margin-top: 40px;

}

.icon-label {
   position: absolute;
  font-size: 1em;
  color: #000000;
  font-weight: 400;
  z-index: 10;
  top:100px;
  right:-7px
}

/* ホバー時の効果 */
.book-icon-container:hover .book-icon {
  fill: #007bff; /* ホバーで塗りつぶし色を変更 */
  stroke: #007bff; /* ホバーで線の色を変更 */
  transform: scale(1.05) rotate(3deg); /* 少し拡大して回転 */
}
.book-icon-container:hover .icon-label {
  color: #007bff;
}
  

/* 省略... 既存のCSSはそのまま残してください */

/* ==================================== */
/* ヘッダーとナビゲーションの追加CSS */
/* ==================================== */
.main-header {
  /* 既存のスタイルを維持しつつ、メニューパネルの基準にする */
  position: absolute;
  top: 20px;
  right: 20px;
  z-index: 100;
  /* main-navを基準にするため、ここをrelativeに設定しない */
}

.main-nav {
  position: relative; /* nav-menu-panel の絶対配置の基準 */
  display: flex; /* menu-button と menu-panel の配置用 */
  flex-direction: column; /* 縦に並べる */
  align-items: flex-end; /* 右寄せ */
}
.menu-button {
  background-color: transparent; /* ボタンの背景色を透明にする */
}
.menu-button {
  position: fixed;
  margin-top: -60px;
  text-decoration: none;
  color: #333;
  font-size: 1.1em;
  padding-right: 48px;
  border-radius: 5px;
  display: flex; /* アイコンとテキストを横並びにするため */
  align-items: center;
  gap: 8px; /* アイコンとテキストの間隔 */

  cursor: pointer; /* ホバーでポインター表示 */
}

.menu-icon {
  /* ハンバーガーアイコンの代わりにシンプルな四角形を例示 */
  width: 20px;
  height: 20px;
  font-size: 20px;
  background-color: #333; /* アイコンの色 */
  -webkit-mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>')
    no-repeat center;
  mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>')
    no-repeat center;
  -webkit-mask-size: contain;
  mask-size: contain;
  display: block;
}

/* ナビゲーションメニューパネルのスタイル */
.nav-menu-panel {
  position: fixed;
  top: 0; /* menu-button と同じ高さに開始 */
  right: 0;
  width: 250px; /* メニューパネルの幅 */
 height: 60vh;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  padding: 20px;
  padding-top: 60px; /* menu-button の高さ分を空ける */
  transform: translateX(100%); /* 初期状態では右に完全に隠す */
  opacity: 0; /* 初期状態では透明 */
  visibility: hidden; /* 初期状態では要素自体を非表示 */
  transition: transform 0.3s ease-out, opacity 0.3s ease-out, visibility 0.3s; /* スムーズなアニメーション */
  pointer-events: none; /* 非表示時はマウスイベントを無効化 */
  display: flex;
  flex-direction: column;
  justify-content: space-between; /* 項目とSNSアイコンを上下に配置 */
  min-height: 300px; /* メニューの最低高 */
  z-index: 1000;
}

/* メニューパネルが表示された時のスタイル */
.nav-menu-panel.is-open {
  transform: translateX(0); /* 完全に表示 */
  opacity: 1; /* 不透明 */
  visibility: visible; /* 表示 */
  pointer-events: auto; /* 表示時はマウスイベントを有効化 */
}

/* ... 既存の.nav-menu-panel のCSSはそのまま残す ... */

.nav-menu-panel ul {
  list-style: none; /* リストのデフォルトのマーク（点など）を削除 */
  padding: 0; /* デフォルトのパディングをリセット */
  margin: 0; /* デフォルトのマージンをリセット */
  flex-grow: 1; /* メニュー項目がパネル内で縦方向に伸びるようにする */
  display: flex; /* 項目をflexで配置 */
  flex-direction: column; /* 項目を縦並びにする */
  justify-content: center; /* 項目を垂直方向の中央に寄せる */
}

.nav-menu-panel ul li {
  margin-bottom: 10px; /* 各リストアイテムの下に余白 */
  /* 必要であれば、リストアイテム自体のパディングやマージンも調整 */
  text-align: center; /* ★追加: テキストを右寄せにする（写真のメニューの見た目に近い） */
}

.nav-menu-panel ul li:last-child {
  margin-bottom: 0; /* 最後のリストアイテムの下の余白は不要 */
}

.nav-menu-panel ul li a {
  text-decoration: none;
  color: #333;
  font-size: 1.1em;
  padding: 8px 15px; /* ★変更: リンクに左右のパディングを追加して、ホバー領域を広げる */
  display: block; /* パディングが効くようにブロック要素化 */
  transition: background-color 0.2s ease, color 0.2s ease; /* ホバー時のアニメーションを追加 */
}

.nav-menu-panel ul li a:hover {
  border-radius: 4px; /* ★追加: ホバー時の背景に丸み */
}
.nav-menu-panel ul li a {
  text-decoration: none;
  color: #333;
  font-size: 1.1em;
  padding: 8px 15px;
  display: block;
  transition: background-color 0.2s ease, color 0.2s ease;

  position: relative; /* ★重要: 疑似要素の基準点とする */
  overflow: hidden; /* ★重要: 初期状態の線がはみ出さないように */
}

.nav-menu-panel ul li a:hover {
  border-radius: 4px; /* ホバー時の背景に丸み */
}

/* ★メニューリストのリンクにホバー時の線のアニメーション★ */
.nav-menu-panel ul li a::before {
  content: "";

  position: absolute;
  top: 50%; /* 垂直方向の中央に配置 */
  left: 30%; /* 左端から開始 */
  width: 0%; /* 初期状態では幅0 */
  height: 0.5px; /* 線の太さ */
  background-color: #333; /* 線の色 */
  transform: translateY(-50%, -50%); /* 自身のY軸中央を基準に配置 */
  transition: width 0.3s ease-out; /* 幅のアニメーション */
}

.nav-menu-panel ul li a:hover::before {
  width: 40%; /* ホバー時に幅を100%にする */
}
/* SNSアイコンのセクションの調整 */

/* social-icons クラスを持つ div 内のすべての i 要素 (Font Awesomeアイコン) に適用 */
.social-icons i {
  font-size: 20px; /* アイコンのサイズを設定 */
  color: #333; /* アイコンの色を設定（例：濃いグレー） */
  vertical-align: middle;
  margin-left: 15px;

  /* テキストなどと並んだときに中央揃えにする */
}

/* social-icons クラスを持つ div 内のすべての a 要素に適用 */
.social-icons a {
  display: inline-block; /* 横並びにして、幅や高さを設定できるようにする */
  margin: 0 1px; /* 左右に8pxのマージンを設定して、アイコン間にスペースを作る */
  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out; /* ホバー時のアニメーションを滑らかにする */
}

/* マウスホバー時にアイコンを少し大きくし、色を変える */
.social-icons a:hover i {
  transform: scale(1.1); /* 1.1倍に拡大 */
  color: #888888; /* 例：ホバー時に青色にする */
}

/* 特定のアイコンの色をカスタマイズしたい場合（例：InstagramとTwitterのブランドカラー） */
.social-icons .fa-instagram {
  color: #888888; /* Instagramのブランドカラー */
}
.social-icons .fa-twitter {
  color: #888888; /* Twitterのブランドカラー */
}

.social-icons a:hover .fa-instagram {
  color: #888888; /* ホバー時のInstagramカラーを少し濃くする */
}
.social-icons a:hover .fa-twitter {
  color: #888888; /* ホバー時のTwitterカラーを少し濃くする */
}
.social-icons {
  display: flex;
  justify-content: flex-end; /* ★変更: 右寄せにする（写真のメニューの見た目に近い） */
  gap: 15px;
  margin-top: 30px; /* メニュー項目との間隔を少し広げる */
  padding-right: 15px; /* ★追加: リンクの右パディングに合わせて余白を追加 */
}

/* ... その他のCSSはそのまま ... */

.social-icons {
  display: flex;
  justify-content: center;
  gap: 15px; /* アイコン間のスペース */
  margin-top: 20px; /* メニュー項目との間隔 */
}

.social-icons img {
  width: 24px; /* アイコンのサイズ */
  height: 24px;
  opacity: 0.7;
  transition: opacity 0.2s ease;
}

.social-icons img:hover {
  opacity: 1;
}
/* left-panel が position: relative; であることを確認 */
.left-panel {
  position: relative; /* 子要素の絶対位置指定の基準点になります */
  /* ここに他の .left-panel のスタイルがあればそのまま残します */
  /* 例: padding, width, height など */
}

.vertical-text {
  /* 既存の vertical-text のスタイルはそのまま残します */
  position: relative;
  /* 縦棒のスペースを確保（棒の長さ＋テキストとの間隔） */
  /* 縦書きでテキストが垂直になっている場合： */
  padding-top: 15px; /* 上部にスペース */
  padding-left: 0; /* 横棒のパディングは不要になることが多い */

  /* 横書きでテキストが垂直になっている場合（例: transform: rotate(-90deg)）: */
  /* その場合は、棒も一緒に回転するので、元のwidth/heightのまま垂直に見えますが、 */
  /* top/left/transform の調整が必要になるかもしれません */
}

.ginger-illustration {
  position: fixed;
  bottom: 20px;
  left: 20px;
  width: 120px;
  height: auto;
  z-index: 10;

  /* Vanta.jsの背景になじませるための透過度 */
  opacity: 0.3; /* 透過度を調整し、Vanta.js背景になじませる。0.1〜0.7程度で試す */
  /* イラストの色自体をVanta.jsの背景色に合わせると、より同化します */
}
.ginger-illustration {
  /* 既存のスタイル */
  transition: transform 0.2s ease-out; /* 0.2秒かけて滑らかに変化 */
}

.ginger-illustration:hover {
  transform: translateY(-7px); /* ホバー時に上に8px移動 */
}

.ginger-icon-container {
  position: fixed;
  bottom: 20px;
  left: 0px;
  width: 120px;
  height: auto;
  z-index: 10;
}

/* SVGアイコンのスタイル */
.ginger-icon {
  width: 50px; /* アイコンの幅を調整 */
  height: auto; /* 高さは自動調整 */
  display: block;
  margin: 0 auto 15px auto; /* 中央配置と下マージン */
  
  /* SVG内部のパスの色を設定 */
  fill: #000000; /* ジンジャーらしい色合いに設定 */
  stroke: #000000; /* 線の色も同じに */
  
  transition: fill 0.3s ease-in-out, stroke 0.3s ease-in-out, transform 0.3s ease-in-out;
}



/* ホバー時の効果 */
.ginger-icon-container:hover .ginger-icon {
  fill: #c78d2b; /* ホバーで少し暗めの色に変更 */
  stroke: #c78d2b; /* ホバーで線の色を変更 */
  transform: scale(1.05); /* 少し拡大 */
}
.ginger-icon-container:hover .icon-label {
  color: #c78d2b;
}
/* sidebar-left または vertical-text の初期設定 */
/* 今回はp要素（vertical-text）自体をフェードインさせます */
.vertical-text {
  /* 既存の縦書き、色、フォントサイズなどのスタイルはそのまま残します */
  writing-mode: vertical-rl; /* 縦書きの例 */
  text-orientation: upright;
  color: #333; /* 文字色など */
  font-size: 1.1rem; /* フォントサイズ */
  position: relative;
  top:-190px;
  font-weight: 500;
  /* ★ここからフェードインアニメーションのCSS */
  opacity: 0; /* 初期状態: 透明 */
  transform: translateY(20px); /* 少し下にずらしておく（フェードイン時に上へ動かすため） */
  transition: opacity 2s ease-out, transform 2s ease-out; /* アニメーションの時間を設定 */
  transition-delay:  6s; /* ページ読み込み後、少し遅れてアニメーションを開始 */
}

.vertical-text::before {
  content: "";
  position: absolute;
  left: 48.5%; /* 親要素の幅の中央 */
  top: -40%; /* 親要素の上端に配置 */
  transform: translateX(-50%); /* 自身の幅の半分だけ左にずらして完全に中央に */
  /* color: #555; /* グラデーションを使うので不要 */
  width: 0.5px; /* 縦棒の太さ（細さ） */
  height: 90px; /* 縦棒の長さ（お好みで調整） */
  /* background-color: currentColor; /* グラデーションを使うので不要 */
 
  /* ★修正: グラデーションの記述 */
  background: linear-gradient(
    to bottom,
    #7e7d7d 0%,    /* 一番上は #7e7d7d */
    #a3a3a3 50%,    /* 中間点は #a3a3a3 */
    #000000 100%   /* 一番下は #000000 */
  );
  /* もし、5pxで急に色が変わり、そこからまたグラデーションするなら、以下のように記述 */
  /*
  background: linear-gradient(
    to bottom,
    #7e7d7d 0px,     // 0pxから5pxまでは #7e7d7d
    #7e7d7d 5px,     // 5pxで #7e7d7d
    #000000 5px,     // 同じ5pxで #000000 に切り替え
    #070707 100%     // 5pxから100%まで #070707 へグラデーション
  );
  */
}


/* アニメーション後の状態 (JavaScriptでこのクラスを追加する) */
.vertical-text.fade-in-active {
  opacity: 1; /* 最終状態: 不透明 */
  transform: translateY(0); /* 元の位置に戻す */
}



.new-section {
  width: 100%;
  padding-top: 395px;

  color: #333;
  text-align: center;
  position: relative;
  z-index: 5;
}

.new-section-content {
  max-width: 1000px;
  margin: 0 auto;
}

.new-section h2 {
  font-size: 3.5em;
  line-height: 2;
  word-spacing: 10px;
  margin-bottom: 50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  font-weight: 300;
  margin-left: 265px;
}
.column-right p{
  font-size: 1.3em;
  line-height: 2;
  word-spacing: 10px;
  margin-bottom: 50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  gap:30px;
  text-align: left;
  
  
  }

.column-right {
  flex: 1; /* ★利用可能なスペースを均等に分配 */
  min-width: 500px;
  font-family: "Cormorant Garamond", serif;
  font-size: 1.55em;
  line-height: 2;
  word-spacing: 10px;
  color: #555;
  margin-right: 50px;
}



.new-section-columns {
  display: flex;
  flex-wrap: wrap;
  gap: 40px;
  align-items: center;
  justify-content: center;
  position: relative;
}

.new-section-columns .column-left {
  flex: 1;
  min-width: 300px;
  max-width: 450px;
  display: flex; /* 内部の画像を縦に並べるため */
  flex-direction: row;
  gap: 20px; /* 画像間のスペース */
  align-items: center; /* 画像を中央寄せ */
}

/* 新しいセクションの画像が含まれる親要素 (例: column-left) に perspective を設定 */
.new-section-columns .column-left {
  flex: 1;
  min-width: 300px;
  max-width: 450px;
  display: flex;
  flex-direction: column;
  gap: 15px;
  align-items: flex-start;
  justify-content: flex-start; /* ここを変更：中央寄せから左寄せへ */
  perspective: 1000px;
}


.new-section-image {
  max-width: 80%;
  height: auto;
  display: block;
  border-radius: 5px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);

  
}
.new-section-common-image
{margin-top: 0px;
  display: block;
  max-width: 100%;
 
  will-change: transform;
}


.new-section-image1 {
  position: absolute; /* ★重要: 親要素（contact-sub-image-wrapper）を基準に絶対配置 */
  width: 200px;  /* ★メイン画像と同じ固定幅 */
  height: auto;  /* ★アスペクト比を保ちつつ高さを自動調整 */
  /* top, right で画像を外にはみ出させつつ初期位置を設定 */
  top:300px;
  left: 130px; /* 親要素の右端から外に50pxはみ出す */
  max-width: 350px;
  border-radius: 10px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  z-index: 100; /* 最も手前に表示 */
  will-change: transform; /* ★を調整することで、動きの滑らかさが変わります */
}

/* 他の画像スタイルはそのまま */
.new-section-image {
  width: 300px;  /* ★同じ固定幅 */
  height: auto;  /* ★アスペクト比を保ちつつ高さを自動調整 */
  max-width: 350px;
margin-left: -130px;
  border-radius: 10px;
  
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  z-index: 1; /* 重なり順（contact-image-group内での相対的なz-index） */
  margin-right: 270px; /* 他の画像との間隔 */
  will-change: transform; /* ★重要: パフォーマンス向上のためのヒント */
}

/* =========================================== */
/* .new-section-sentence のスタイル（以前のコードを再掲、変更なし） */
/* =========================================== */

.new-section-sentence {
  padding: 50px 5%;
margin-top: 250px;
  text-align: left;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: flex-start;
  gap: 40px;
 
}

.new-section-content-sentence {
  max-width: 1200px;
  margin: 0 auto;
}

.new-section-content-sentence .section-title {
  font-size: 3.5em;
  line-height: 2;
  word-spacing: 10px;
 margin-top:50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  font-weight: 300;
  margin-bottom: 30px;
  text-align: left;
}

/* =========================================== */
/* .new-section-columns-sentence のスタイル（ここを修正） */
/* =========================================== */
.new-section-columns-sentence {
  display: flex; /* ★フレックスボックスコンテナに */
  flex-wrap: wrap; /* ★画面が狭くなったら折り返す */
  justify-content: space-between; /* ★子要素間に均等なスペースを配置 */
  align-items: flex-start; /* ★上揃え */
  gap: 40px; /* ★カラム間の隙間 */
  margin-top: 30px;
}

/* =========================================== */
/* column-left-text-sentence と column-right-text-sentence のスタイル */
/* =========================================== */
.column-left-text-sentence,
.column-right-text-sentence {
  font-size: 1.3em;
  line-height: 2;
  word-spacing: 10px;
 margin-top:50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  font-weight: 300;
  flex: 1; /* ★利用可能なスペースを均等に分配 */
  min-width: 300px; /* 最小幅を設定 */
  max-width: 48%; /* ★2つのカラムが並ぶように最大幅を設定 (gapを考慮して48%程度) */
  /* padding や margin は、必要に応じて調整 */
  
}

.column-left-text-sentence p,
.column-right-text-sentence p {
  font-size: 1.5em;
  line-height: 2;
  word-spacing: 10px;
  margin-bottom: 50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  text-align: left;
}


/* style.css (またはあなたのCSSファイル) */
/* 最初は透明で少し下に配置 */
.fade-in-child {
  opacity: 0;
  transform: translateY(30px);
  transition: opacity 1s ease, transform 1s ease;
}

/* 表示トリガー時 */
.fade-in-child.visible {
  opacity: 1;
  transform: translateY(0);
}

/* 3つ目のセクション (office-section): 画像を画面いっぱいに表示 */
.office-section {
  padding: 0;
  border-radius: 20px !important;
  position: relative; /* 子要素 (.office-content) の絶対配置の基準となる */
  width: 100%;
  height: 80vh; /* セクションの高さをビューポートの80%に設定 */
  display: flex;
  justify-content: center; /* コンテンツを水平方向中央に */
  align-items: center; /* コンテンツを垂直方向中央に */
  margin-top: 00px;
}

.office-content {
  position: relative;
  display: block;
  border-radius: 15px !important;
  height: 600px; /* 画像の表示領域の高さ。適切に調整してください */
  display: flex; /* 画像を中央に配置するために flexbox を利用 */
  justify-content: center;
  align-items: center;
  z-index: 10;
  font-size: 2em;
  line-height: 2;
  word-spacing: 10px;
  font-family: "Cormorant Garamond", serif;
  color: #555;
 
}

.office-main-image {
  position: absolute;
  width: 100vw;
  height: 130vh;
  object-fit: cover;
  /* 初期状態のclip-pathを設定。最初は完全に表示（開いた状態） */
  clip-path: inset(50% 0% 0% 50%);
  /* アニメーションを滑らかにするため、transitionを設定することも可能です */
  /* transition: clip-path 0.3s ease-out; */
  /* スクロール連動の場合はJavaScriptで直接変更するため、CSS transitionは不要な場合が多い */
  border-radius: 15px !important;
  /* 既存のパララックスコードでtransform: translate(-50%, -50%)が使われている場合、
     ここでは初期値として設定しておくと良いでしょう。 */
  top: 80%;
  left: 50%;
  transform: translate(-50%, -50%);
  overflow: hidden;
}

.company-profile-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
  box-sizing: border-box;
  padding-top: 500px;
 
    /* 既存のスタイルがあれば残す */
   width: 100%; /* これで横幅いっぱいに広がる */
    max-width: none; /* ★ これが重要！もし設定されていれば削除または none にする */
    /* 必要であれば、このラッパー内部のコンテンツに左右のパディングを設定する */
    /* padding: 0 50px; などの設定 */
 
}

.company-profile-section {
  width: 90%;
  max-width: 900px;
  padding: 40px 60px;
  position: relative;
  text-align: left;
}

.company-profile-title {
  font-size: 3.5em;
  line-height: 2;
  word-spacing: 10px;
 margin-top:50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  font-weight: 300;
  
  text-align: center;

 
}

.company-info-grid {
  display: grid;
  grid-template-columns: 150px 1fr; /* Label width and value width */
  gap: 25px 30px;
  margin-top: 100px;
  
}



.info-label {
  font-weight: 700;
  color: #555;
  font-size: 1.1em;
  padding-top: 5px; /* Align with multi-line content */
  white-space: nowrap; /* Prevent label wrapping */
  text-align: center;
}

.info-value {
  color: #333;
  font-size: 1.1em;
  line-height: 1.5;
  text-align: center;
}
.info-label1 {
  font-weight: 700;
  color: #555;
  font-size: 1.1em;
  padding-top: 5px; /* Align with multi-line content */
  white-space: nowrap; /* Prevent label wrapping */
  text-align: center;
}

.info-value1 {
  color: #333;
  font-size: 1.1em;
  line-height: 1.5;
  text-align: center;
}
.info-row {
  display: contents;
  font-size: 1.5em;
  line-height: 2;
  word-spacing: 10px;
 margin-top:50px;
  color: #555;
  font-family: "Cormorant Garamond", serif;
  font-weight: 300;
}
.fade-in-child .info-label, .fade-in-child .info-value {
  opacity: 0;
  transform: translateY(30px);
  transition: opacity 3s ease, transform 3s ease;
  will-change: opacity, transform;
}

.fade-in-child.visible .info-label, .fade-in-child.visible .info-value {
  opacity: 1;
  transform: translateY(0);
}
  /* 追加: flexでもfade-inが効くように */
  
  /* 既存のスタイルはそのまま */

.info-row > .info-label,
.info-row > .info-value {
  border-bottom: 1px solid #000000; /* 区切り線を追加 */
  padding-bottom: 20px; /* 線と次の行の間に余白 */
  margin-bottom: 5px; /* 線と次の行の間のマージン */
}

/* 最後の行の区切り線を削除（オプション） */
.company-info-grid .info-row:last-of-type > .info-label,
.company-info-grid .info-row:last-of-type > .info-value {
  border-bottom: none;
  padding-bottom: 0;
  margin-bottom: 0;
}


/* 既存の .company-info-grid も少し調整すると良いかもしれません */
.company-info-grid {
  display: grid;
  grid-template-columns: 150px 1fr; /* Label width and value width */
  gap: 25px 30px; /* 行間の縦方向のgapは必要なくなる可能性もあるので調整 */
  margin-bottom: 50px;
}




/* もし .company-profile-wrapper が存在し、
   それが原因で .contact-section が広がらない場合、
   以下のスタイルを .company-profile-wrapper に適用してください。
   もし他のセクションの幅も制御しているなら、慎重に検討してください。 */
.company-profile-wrapper {
  width: 100%;
  max-width: none; /* これが重要 */
  /* padding や margin があれば調整 */
}


.contact-section {
  position: relative;
  width: 100%;
  min-height: 100vh; /* 少なくともビューポートの高さにする */
  background: rgba(251, 246, 229, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 5rem; /* remを使用 */
  padding: 5rem 0; /* 上下のパディングを追加し、コンテンツが端に寄りすぎないようにする */
  overflow: hidden; /* はみ出しを隠すことでレイアウトの崩れを防ぐ */
}

/* =========================================== */
/* コンタクトコンテンツラッパー (.contact-content-wrapper) */
/* Flexboxを使い、要素を柔軟に配置 */
/* =========================================== */
.contact-content-wrapper {
  display: flex;
  flex-direction: row; /* デフォルトは横並び */
  justify-content: space-between;
  align-items: center; /* 縦方向中央揃え */
  max-width: 120rem; /* 最大幅を設定し、広すぎる画面での見栄えを良くする */
  width: 90%; /* 親要素の90%の幅を使用 */
  padding: 3rem 0; /* 左右のパディングは不要（width: 90%で対応） */
  margin: 0 auto; /* 中央寄せ */
}

/* =========================================== */
/* テキストエリア (.contact-text-area) */
/* =========================================== */
.contact-text-area {
  flex: 1; /* 利用可能なスペースを均等に分配 */
  margin-right: 5rem; /* remを使用 */
  min-width: 30rem; /* 最小幅を設定し、コンテンツが潰れないようにする */
  max-width: 50%; /* 広がりすぎないように最大幅を設定 */
}

.contact-heading {
  font-size: 3.5rem; /* remを使用 */
  line-height: 1.3; /* 行間を調整 */
  word-spacing: normal; /* word-spacingをリセットまたは調整 */
  font-family: "Cormorant Garamond", serif;
  color: #555;
  margin-bottom: 2rem; /* 下マージンを追加 */
}

.contact-mark {
  /* ここは既存のスタイルを維持しつつ、必要に応じてremで調整 */
  padding: 1rem 2rem; /* 例: remでパディング */
  font-size: 1.8rem; /* 例: remでフォントサイズ */
  display: inline-block; /* インラインブロックにして幅をコンテンツに合わせる */
  background-color: #555; /* 背景色 */
  color: #fff; /* 文字色 */
  border-radius: 0.5rem;
  margin-bottom: 2rem;
  display: none;
}

.contact-description {
  font-size: 1.8rem; /* remを使用 */
  line-height: 1.8; /* 行間を調整 */
  word-spacing: normal; /* word-spacingをリセットまたは調整 */
  font-family: "Cormorant Garamond", serif;
  color: #555;
  margin-top: 2rem; /* remを使用 */
  text-align: left;
}

/* =========================================== */
/* 画像グループ (.contact-image-group) */
/* =========================================== */
.contact-image-group {
  display: flex;
  flex-direction: column; /* 画像を縦に並べる */
  align-items: center; /* 中央揃え */
 
  z-index: 100;
  flex-shrink: 0; /* テキストエリアが縮んでも画像グループの幅は固定 */
  min-width: 30rem; /* 最小幅を設定 */
  max-width: 45%; /* 広がりすぎないように最大幅を設定 */
}

.contact-main-img {
  width: 65%; /* 親要素の幅に合わせて可変 */
  max-width: 35rem; /* 最大幅を設定 */
  height: auto;
  border-radius: 1rem;
  margin-bottom: 2rem;
  box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.1);
  z-index: 1;
  margin-top: 30px;
  margin-right: 80px;
  position: relative;
  right:50px;
  

  
  /* margin-right: 270px; のような固定マージンはレスポンシブでは避けるべき */
  /* 画像間のスペースはgapやFlexboxのマージンで調整 */
  will-change: transform;
}

/* --- サブ画像とそのテキストのラッパー (.contact-sub-image-wrapper) --- */
.contact-sub-image-wrapper {
 position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  top:-50px;
  left:70px;
  z-index: 10;
}

/* --- サブ画像のスタイル (.contact-sub-img-positioned) --- */
/* 絶対配置はレスポンシブが難しい。ここでは割合で調整するか、メディアクエリで変更 */
.contact-sub-img-positioned {

  width: 100%; /* 親要素の幅に対する割合 */
  max-width: 20rem; /* 最大幅 */
  height: auto;
  top: 0rem; /* remを使用し、上にずらす量を調整 */
  right: 0rem; /* remを使用し、右にずらす量を調整 */
  border-radius: 1rem;
  box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.1);
  z-index: 1;
  will-change: transform;
}

/* =========================================== */
/* その他の要素のレスポンシブ調整 */
/* =========================================== */

/* 固定位置のボタンなど */
.book-icon-container {
  position: fixed;
  top: 20vh; /* ビューポート高さの20% */
  right: 0;
  z-index: 1000;
  padding: 1rem;
  /* モバイルでは非表示にするか、位置を調整するメディアクエリを追加 */
}


/* カスタムカーソル（デスクトップ向け） */
.circle-cursor {
  position: fixed;
  width: 12rem;
  height: 12rem;
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: 50%;
  pointer-events: none;
  z-index: 9999;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.2rem;
  font-family: sans-serif;
  text-align: center;
  transition: background-color 0.2s ease, transform 0.2s ease;
}



/* --- footer-section のスタイル --- */
.footer-section {
  position: relative;
  width: 100%;
  padding: 250px 0;  
  overflow: visible;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  /* ★重要: フッターセクション自体の背景色を設定 */
}


.footer-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url('images/26554996_l.jpg'); /* ← あなたの画像パスに変更 */
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  z-index: 0;
  opacity: 0.9; /* ← 背景が強すぎる場合は透明度で調整 */
}

.footer-content {
  position: relative;
  z-index: 100; /* コンテンツが手前にあることを確認 */
  width: 80%;
  max-width: 1200px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
  padding: 40px 0;
  box-sizing: border-box;
}

.footer-nav {
  display: flex;
  justify-content: flex-start;
  gap: 30px;
  margin-bottom: auto;
}

.footer-nav a {
  color: #000000; /* ★重要: 文字色を純粋な黒に変更 */
  text-decoration: none;
  font-size: 1.5rem;
  padding: 5px 0;
  transition: color 0.3s ease;
}

.footer-nav a:hover {
  color: #555555; /* ★ホバー時の色を少し薄い黒に調整 */
}

.footer-right {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  margin-bottom: auto;
}

.footer-brand .brand-name {
  font-family: serif;
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 5px;
  color: #000000; /* ★重要: 文字色を純粋な黒に変更 */
}

.footer-brand .brand-tagline {
  font-size: 0.9rem;
  line-height: 1.5;
  margin: 0;
  color: #000000; /* ★重要: 文字色を純粋な黒に変更 */
}

.footer-social {
  margin-top: 15px;
}

.footer-social a {
  color: #000000; /* ★重要: アイコンの色を純粋な黒に変更 */
  font-size: 1.5rem;
  margin-left: 15px;
  transition: color 0.3s ease;
}

.footer-social a:hover {
  color: #555555; /* ★ホバー時の色を少し薄い黒に調整 */
}

.footer-info {
  text-align: left;
  font-size: 1.5rem;
  line-height: 1.6;
  margin-top: auto;
}

.footer-info p {
  margin: 0;
  color: #000000; /* ★重要: 文字色を純粋な黒に変更 */
}




body {
  margin: 0;
  font-family: sans-serif;
  overflow-x: hidden;
}

#loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  
  background-color: #fbcc8e; /* 真っ白な背景 */

  display: flex; /* これにより子要素の .loader が中央に配置されます */
  justify-content: center; /* 水平方向の中央寄せ */
  align-items: center;     /* 垂直方向の中央寄せ */
  z-index: 1000;
  
  opacity: 1; /* 初期状態は完全に表示 */
  visibility: visible;

  transition: opacity 5s ease-out, visibility 5s ease-out; /* フェードアウト時間 */
}

#loading-overlay.hidden {
  opacity: 10;
  visibility: hidden;
  pointer-events: none!important;
}

/* ここから提供された新しいローディングアニメーションのCSS */
.loader {
display: inline-block;
text-align: center; /* 中央揃えのテキストにするが、ここではボックス自体が中央に来るのであまり影響なし */
line-height: 86px; /* 縦方向のテキストのセンタリングに影響 */
/* text-align: center; ← 2回記述されているので1つ削除してもOK */
position: relative; /* 擬似要素を相対的に配置するための基準 */
padding: 0 48px; /* ローダーの両端に余白を設ける */
font-size: 48px;
font-family: Arial, Helvetica, sans-serif;
color: #000; /* 画像は白い背景に黒っぽい文字なので、#FFF を #000 に変更 */
}
.loader:before, .loader:after {
content: "";
display: block;
width: 15px;
height: 15px;
background: currentColor; /* .loader の color を継承（#000になる）*/
position: absolute;
animation: load .5s infinite alternate ease-in-out;
/* top: 0; は :before のみ */
}
.loader:after {
top: auto; /* :before の top:0 を上書き */
bottom: 0; /* 下に配置 */
}

/* ここからキーフレームアニメーション */
@keyframes load {
0% {
  left: 0; /* 左端から開始 */
  height: 43px;
  width: 15px;
  transform: translateX(0); /* 横移動なし */
}
50% {
  height: 10px; /* 中間で縦に縮む */
  width: 40px; /* 中間で横に伸びる */
}
100% {
  left: 100%; /* 右端まで移動 */
  height: 43px;
  width: 15px;
  transform: translateX(-100%); /* 要素の幅分だけ左に戻す（右端に揃える） */
}
}







/* さらに広い画面での調整 (オプション) */
@media (min-width: 1200px) {
  .main-content-wrapper {
    max-width: 1400px; /* より広い画面での最大幅 */
  }
  .left-panel {
    padding-left: 250px; /* さらに広い画面でのパディング調整 */
  }
  .main-content-wrapper {
    
    overflow: hidden;
}}

/* 768px未満の画面（タブレットの縦向き、スマートフォンなど）の場合 */
@media screen and (max-width: 768px) {

  .main-nav {
      /* もし .main-nav 自体に中央寄せのスタイルがあるならここでリセット */
      margin: 0;
      width: 100%; /* フル幅を確保 */
  }

  /* .menu-button を左端に移動 */
  .menu-button {
    /* 既存の fixed を維持しつつ、位置を左に固定 */
    left: 46px; 
    top:80px;       /* 左端に配置 */
    right: auto;    /* 右からの指定を解除 */
    padding-left: -10px; /* 左からのパディングを追加（例: 画面端からの余白） */
    padding-right: 0; /* 右パディングをリセット */
    margin-top: -60px; /* 上からの位置を調整（例: 少し下にずらす） */
    /* text-align: left; /* テキストの配置を左に */ 
    /* ここでは display: flex; align-items: center; gap: 8px; は維持でOK */
    justify-content: flex-start; /* アイコンとテキストをボタン内で左寄せ */
    width: auto; /* コンテンツに合わせて幅を調整 */
    z-index: 100; /* 他の要素より手前に表示 */
  }

  /* .nav-menu-panel を左からスライドインするように変更 */
  .nav-menu-panel {
    /* 既存の fixed は維持 */
    left: 0;        /* 左端に配置 */
    right: auto;    /* 右からの指定を解除 */
    width: 160px;   /* メニューパネルの幅を維持 */
    padding-top: 80px; /* menu-button の位置を考慮して上部に余白 */
    background-color: white; /* 背景色を設定しないとコンテンツが見えなくなる可能性 */
    height: 100vh; /* 画面いっぱいの高さにする（スクロール可能にしたい場合） */
    transform: translateX(-100%); /* 初期状態では左に完全に隠す */
    /* opacity, visibility, transition, pointer-events は既存のものを維持 */
    z-index: 100; /* menu-button の下に配置 */
   
  }

  /* メニューパネルが表示された時のスタイルを左からのスライドに修正 */
  .nav-menu-panel.is-open {
    transform: translateX(0); /* 左から完全に表示 */
  }

  /* nav-menu-panel 内のリスト項目を左寄せに調整 (写真の見た目に合わせる場合) */
  .nav-menu-panel ul li {
    text-align: center; /* リストアイテム内のテキストを左寄せ */
  }

  /* nav-menu-panel のリンクのホバー線の調整 (必要に応じて) */
  .nav-menu-panel ul li a::before {
    left: 35px; /* 線を左端から開始 */
    width: 0%; /* 初期幅 */
    
  }

  .nav-menu-panel ul li a:hover::before {
    width: 40%; /* ホバー時に表示される線の幅 */
    
  }

  .brand-info {
    /* ★追加: 右上へ固定するためのプロパティ★ */
    
  
     /* 他の要素より手前に表示する */

    /* コンテンツを右端に揃えるためのFlexbox設定 */
    display: flex;
    flex-direction: column;
    align-items: flex-end; /* flexアイテム（category-info）を右端に寄せる */
    /* text-align: right; は、子要素で個別に制御するためここでは削除または慎重に */
  }

  /* category-info は brand-info の flex アイテムとして配置される */
  .category-info {
    /* 必要に応じて、この要素内のテキストも右寄せに */
    text-align:center;
    top: 30px;       /* 上端から20pxの位置に配置 */
    right: 20px;     /* 右端から20pxの位置に配置 */
    bottom: auto;    /* 下端からの指定を解除 */
    z-index: 100; 
    /* brand-info の align-items: flex-end; で既に右寄せされますが、
       念のためテキスト自体も右寄せに */
  }

  

  
}
@media screen and (max-width: 600px){
  .carousel-container {
    position: relative; /* absolute から relative に変更 */
    top: auto; /* absolute の指定をリセット */
    left: 0; /* absolute の指定をリセット */
    transform: none; /* absolute の transform をリセット */
    width: 90%; /* 親要素 (right-panel) の幅の90%を使用 */
    max-width: 350px; /* 最大幅を維持 */
    height: auto; /* vhでの固定を避ける */
    padding-top: 75%; /* アスペクト比を維持 */
    margin: 40px auto 0 auto; /* 上に余白、左右中央に配置 */
    /* overflow: hidden; は画像のクリッピング用なので、ここでは visible にしない */
    overflow: hidden; /* 画像のクリッピング用として維持 */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影は残す */
     transform: translateX(0); /* 左への移動を解除 */
      margin-top: 30px;
      margin-left: 160px!important; /* カルーセルを中央揃えにする */
      margin-right: auto;
      width: 70%; /* 幅を広く使う */
    }
   
    .carousel-dots {
      /* HTML構造が carousel-container の子要素であると仮定して、以下を設定 */
      /* もし HTML構造が right-panel の子要素のままなら、bottomとleftを調整 */
      position: absolute; /* .carousel-container を基準に絶対配置を維持 */
      bottom: 55px; /* 画像コンテナの下に適切にはみ出すように調整 */
                     /* この値を調整して、画像からの距離を最適化してください */
      ; /* コンテナの水平方向中央に揃える */
      transform: translateX(-50%); /* 自身の幅の半分だけ左にずらし、完璧に中央寄せ */
      overflow: visible; /* ドットがはみ出すのを許可 */
     left:70px;
     margin-left: 81px;
      /* display, justify-content, align-items, width, padding, border-radius, z-index, gap は維持 */
      display: flex; 
      justify-content: right; 
      align-items: right ; 
      width: auto; 
      padding: 5px 10px;
      border-radius: 5px; 
      z-index: 70; 
      gap: 12px;
    }
  }

/* さらに小さい画面（スマートフォンなど）の場合 */
@media screen and (max-width: 480px) {
  .menu-button {
    font-size: 20px; /* 小さい画面向けに読みやすい固定サイズを設定 */
    padding: 8px 12px;
  }

  .sidebar-left {
    position: static; /* サイドバーを静的にし、水平に表示 */
    writing-mode: horizontal-tb;
    text-align: center;
    font-size: 1em;
    padding: 10px 0;
    margin-bottom: 20px;
    transform: none; /* transformを解除 */
    left: auto; /* 固定位置を解除 */
    top: auto; /* 固定位置を解除 */
  }

 
 

  
}

/* --- 768px以下の画面幅でのレスポンシブ対応 --- */
@media (max-width: 768px) {


  
  /* メインコンテンツラッパー: 縦並びに変更 */
  .main-content-wrapper {
    flex-direction: column-reverse; /* 横並びから縦並びに変更 */
    height: auto; /* ビューポートの高さに固定せず、コンテンツに合わせて高さを自動調整 */
    overflow-x: hidden; /* 横スクロールバーを非表示にする */
    overflow-y: auto; /* 縦スクロールは許可 */
    overflow: hidden;
  }
  

  /* 左パネル: 左寄せに特化 */
  .left-panel {
    flex: none;
    width: 100%;
    /* padding-leftを大きめにして、左に余白を持たせる */
    padding: 20px; /* 全体的なパディングを調整 */
    text-align: left; /* テキストを左寄せに */
    margin-right: 0; /* 右側のマージンをリセット */
    align-items: flex-start; /* flexアイテムを左端に揃える */
  }

 


  /* 左パネル: 全体の中央に寄せる */
  .left-panel {
    flex: none; /* flex比率をリセット */
    width: 100%; /* フル幅にする */
    padding: 5vw; /* 上下左右のパディングを統一 */
    text-align: left; /* テキストを中央寄せ */
  }

  .left-panel h1 {
    font-size: 3.2em; /* フォントサイズを小さくして読みやすく */
    margin-bottom: 20px; /* 固定ピクセル値で安定させる */
    margin-top: 30px; /* 固定ピクセル値で安定させる */
    word-spacing: normal; /* 単語間隔をデフォルトに戻す */
     white-space:nowrap ;
     margin-left: 15px;
  }

  .description-line1,
  .description-line2 {
    font-size: 2em; /* 説明文のフォントサイズを調整 */
    line-height: 2;
    word-spacing: normal;
    margin-top: 65px;
    text-align: left;
    padding-left: 20px;
  }
  .description-line2 {
    margin-top: 25px;
  }

  
  /* カルーセルコンテナ: 通常のフロー内に配置し、中央寄せ */

  .carousel-container {
    position: relative; /* absolute から relative に変更 */
    top: auto; /* absolute の指定をリセット */
    left: auto; /* absolute の指定をリセット */
    transform: none; /* absolute の transform をリセット */
    width: 90%; /* 親要素 (right-panel) の幅の90%を使用 */
    max-width: 350px; /* 最大幅を維持 */
    height: auto; /* vhでの固定を避ける */
    padding-top: 75%; /* アスペクト比を維持 */
    margin: 40px auto 0 auto; /* 上に余白、左右中央に配置 */
    /* overflow: hidden; は画像のクリッピング用なので、ここでは visible にしない */
    overflow: hidden; /* 画像のクリッピング用として維持 */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影は残す */
  }
  /* カルーセルドット: 画像コンテナのすぐ下に配置 */
  .carousel-dots {
    /* HTML構造が carousel-container の子要素であると仮定して、以下を設定 */
    /* もし HTML構造が right-panel の子要素のままなら、bottomとleftを調整 */
    position: absolute; /* .carousel-container を基準に絶対配置を維持 */
    bottom: 50px; /* 画像コンテナの下に適切にはみ出すように調整 */
                   /* この値を調整して、画像からの距離を最適化してください */
    left: 29%; /* コンテナの水平方向中央に揃える */
    transform: translateX(-50%); /* 自身の幅の半分だけ左にずらし、完璧に中央寄せ */
    overflow: visible; /* ドットがはみ出すのを許可 */
    
    /* display, justify-content, align-items, width, padding, border-radius, z-index, gap は維持 */
    display: flex; 
    justify-content: left; 
    align-items: left; 
    width: auto; 
    padding: 5px 10px;
    border-radius: 5px; 
    z-index: 70; 
    gap: 12px;
  }
  
  /* ブランド情報: fixed から relative に変更してフロー内に配置 */
  /* fixed のままだと画面がスクロールしても固定されてしまうため */
  .brand-info {
    position: relative; /* fixed から relative に変更 */
    bottom: auto; /* fixed の指定をリセット */
    right: auto; /* fixed の指定をリセット */
    margin-top: 50px; /* カルーセルとの間に余白 */
    width: 100%; /* 幅を広げてテキストを適切に表示 */
    text-align: center; /* テキストを中央寄せ */
  }

  .category-info .category-title {
    font-size: 1.8rem; /* フォントサイズ調整 */
  }

  .category-info .category {
    font-size: 0.8rem; /* フォントサイズ調整 */
  }

 
    .footer-content {
        width: 90%;
        padding: 20px 0;
        text-align: center; /* 中央寄せに戻す */
    }
  
    .footer-nav {
        flex-direction: column; /* 縦に並べる */
        gap: 10px;
        align-items: center; /* 中央寄せ */
    }
  
    .footer-right {
        align-items: center; /* 中央寄せ */
        margin-top: 30px;
    }
  
    .footer-info {
        text-align: center; /* 中央寄せ */
        margin-top: 30px;
    }
  
  
  /* ★追加: ローディング画像用のスタイル */
  .loader-image {
    width: 100px; /* 例: 画像の幅を150pxに設定 */
    height: auto; /* 高さは自動調整 */
    margin-bottom: 20px; 
    margin-right: 500px;
   /* テキストとの間にスペース */
    /* その他のスタイル（例: アニメーションなど） */
  }
  .vertical-text {
    /* 既存の縦書き、色、フォントサイズなどのスタイルはそのまま残します */
    writing-mode: vertical-rl; /* 縦書きの例 */
    text-orientation: upright;
    color: #333; /* 文字色など */
  
    position: relative;
    top:-100px;
    left:60px;
    font-weight: 400;
    font-size: 1.0em;
    /* ★ここからフェードインアニメーションのCSS */
    opacity: 0; /* 初期状態: 透明 */
    transform: translateY(20px); /* 少し下にずらしておく（フェードイン時に上へ動かすため） */
    transition: opacity 2s ease-out, transform 2s ease-out; /* アニメーションの時間を設定 */
    transition-delay:  1s; /* ページ読み込み後、少し遅れてアニメーションを開始 */
  }
  
  .left-panel,
  .right-panel {
    flex: none; /* flexgrowを無効化 */
    width: 100%;
    padding: 30px; /* パディング調整 */
    min-height: auto; /* 高さを自動調整 */
  }
  .vertical-text::before {
    content: "";
    position: absolute;
    left: 48.5%; /* 親要素の幅の中央 */
    top: -40%; /* 親要素の上端に配置 */
    transform: translateX(-50%); /* 自身の幅の半分だけ左にずらして完全に中央に */
    /* color: #555; /* グラデーションを使うので不要 */
    width: 0.5px; /* 縦棒の太さ（細さ） */
    height: 90px; /* 縦棒の長さ（お好みで調整） */
    /* background-color: currentColor; /* グラデーションを使うので不要 */
   
    /* ★修正: グラデーションの記述 */
    background: linear-gradient(
      to bottom,
      #7e7d7d 0%,    /* 一番上は #7e7d7d */
      #a3a3a3 50%,    /* 中間点は #a3a3a3 */
      #000000 100%   /* 一番下は #000000 */
    );
    /* もし、5pxで急に色が変わり、そこからまたグラデーションするなら、以下のように記述 */
    /*
    background: linear-gradient(
      to bottom,
      #7e7d7d 0px,     // 0pxから5pxまでは #7e7d7d
      #7e7d7d 5px,     // 5pxで #7e7d7d
      #000000 5px,     // 同じ5pxで #000000 に切り替え
      #070707 100%     // 5pxから100%まで #070707 へグラデーション
    );
    */
    display: none;
  }

  

  .new-section-content h2 {
    font-size: 3.2em; /* フォントサイズを小さく */
    margin-bottom: 30px; /* 余白も調整 */
    white-space: nowrap; /* モバイルではテキストを折り返す */
    overflow: visible; /* 折り返すので、はみ出し表示は不要 */
    text-overflow: clip; /* 省略表示も不要 */
    padding-right: 330px;
    
  }
  .new-section-columns {
    display: flex;
    flex-direction: column;
    width: 100%;
    gap: 20px;

  
    
  }
  
  /* ★ここからが修正のポイントです★ */
  /* 左カラム（画像とH2を含む）を縦並びのFlexboxコンテナにする */
  .column-left {
    display: flex; /* ★Flexboxコンテナに設定★ */
    flex-direction: column; /* ★子要素を縦並びにする★ */
    width: 100%;
    gap: 15px; /* 画像とH2の間隔を調整 */
    align-items: center; /* 子要素を水平方向に中央寄せ */
    margin-left: 70px!important;
    margin-top: 100px;

  }

  /* h2と画像の順序をorderプロパティで制御 */
  .column-left .new-section-image {
    order: 0; /* 画像を一番上に配置 */

    
   
  }
  
  .column-left h2 {
    order: 1; /* 画像の次に配置 */
   word-spacing: 2;
    font-size: 1em;
    text-align: left;
 
   
   
  }
 
  .column-right {
    order: 2; /* H2の次に配置 */
   
   
    text-align: left;
    margin-top: 250px;
    margin-right:140px;
    word-spacing: 7;
   
    line-height: 2;
    
  }
  .column-right {
   
    font-size: 1.5em; /* 説明文のフォントサイズを調整 */
    line-height: 2;
    word-spacing: 7;
    margin-left:-11px;
    
    
    gap:20px

  }

  .column-right p {
    margin-bottom: 60px; /* 段落間の余白をモバイル向けに調整 */
    word-spacing: 7;
  }
    
  .fade-in-child  {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 6s ease, transform 6s ease;
    will-change: opacity, transform;
  }
  .new-section-sentence {
    padding: 30px 20px; /* 上下のパディングを減らし、左右のパディングで余白を確保 */
    margin-top: 100px; /* 上部のマージンを調整 */
    flex-direction: column; /* flexアイテムを縦に並べる */
    gap: 20px; /* アイテム間のギャップを調整 */
    align-items: center; /* flexアイテムを中央に揃える（コンテンツ全体が中央寄りに） */
    padding: 40px;
    
  }

  /* =========================================== */
  /* new-section-content-sentence のスタイル */
  /* =========================================== */
  .new-section-content-sentence {
    width: 100%; /* 親要素の幅いっぱいに広げる */
    max-width: none; /* 最大幅の制限を解除 */
    margin: 0; /* マージンをリセット */
    text-align: left; /* コンテンツ内のテキストを左寄せにする */
    
  }

  /* =========================================== */
  /* section-title のスタイル */
  /* =========================================== */
  .new-section-content-sentence .section-title {
    font-size: 3.2em; /* タイトルのフォントサイズを小さくする */
    line-height: 1.5; /* 行の高さを調整 */
    word-spacing: normal; /* 単語の間隔をリセット */
    margin-top: 0; /* 上部のマージンをリセット */
    margin-bottom: 20px; /* 下部のマージンを調整 */
    text-align: left; 

  }

  /* =========================================== */
  /* new-section-columns-sentence のスタイル */
  /* =========================================== */
  .new-section-columns-sentence {
    flex-direction: column; /* カラムを縦に並べる */
    gap: 0px; /* 縦に並んだカラム間のスペース */
    margin-top: 40px; /* 上部のマージンを調整 */
    
  }

  /* =========================================== */
  /* column-left-text-sentence と column-right-text-sentence のスタイル */
  /* =========================================== */
  .column-left-text-sentence,
  .column-right-text-sentence {
    font-size: 1em; /* 段落のフォントサイズを小さくする */
    line-height: 1.6; /* 行の高さを調整 */
    word-spacing: normal; /* 単語の間隔をリセット */
    margin-top: 50px; /* 上部のマージンをリセット */
    flex: none; /* flexの比率をリセット */
    width: 100%; /* カラムが全幅を占めるようにする */
    max-width: 100%; /* 最大幅の制限を解除 */
    text-align: left; /* カラム内のテキストを左寄せにする */
    
  }

  /* =========================================== */
  /* 段落内のテキストのスタイル */
  /* =========================================== */
  .column-left-text-sentence p,
  .column-right-text-sentence p {
    font-size: 2em; /* 段落のフォントサイズを調整 */
    line-height: 1.6; /* 行の高さを調整 */
    
    margin-bottom: 70px; /* 下部のマージンを調整 */
    text-align: left; /* 段落内のテキストを左寄せにする */
    word-spacing: 7;
   
  }
  　　.office-section {
    padding: 20px; /* 左右と上下にパディングを追加し、画像が端に張り付かないようにする */
    margin-top: 50px; /* 必要に応じて上部のマージンを調整 */
  }

  /* .office-content のスタイル */
  .office-content {
    width: 100%; /* コンテンツブロックが親要素の幅いっぱいに広がるようにする */
    max-width: none; /* 最大幅の制限を解除し、スマートフォンでの表示に合わせる */
    margin: 0 auto; /* 中央寄せを維持しつつ、幅100%にする */
  }

  /* .office-main-image のスタイル */
  .office-main-image {
    width: 100%; /* 画像が親要素の幅いっぱいに広がるようにする */
    height:  100vh; /* 高さを自動調整し、画像の縦横比を維持する */
    display: block; /* 画像をブロックレベル要素にし、予期せぬ余白をなくす */
  }



  .company-profile-wrapper {
    padding-top: 35rem;
    align-items: flex-start;
  }

  .company-profile-section {
    padding: 2.5rem 2rem;
  }

  .company-profile-title {
    font-size: 2.5rem;
    line-height: 1.2;
    margin-top: 3rem;
    text-align: left;
  }

  .company-info-grid {
    grid-template-columns: 1fr; /* 1カラム表示にする */
    gap: 3rem;
    margin-top: 9rem;
    
  }

 
  .info-label, .info-label1 {
    font-size: 1.4rem;
    text-align: left;
    border-top: 1px solid #000;
    padding-bottom: 2rem; /* ラベルの下のパディングを調整 */
  }

  .info-value, .info-value1 {
    
    font-size: 1.4rem;
    text-align: left;
    padding-bottom: 2rem; /* 値の下のパディングを調整 */
  }



  /* 最後の行の線の削除（オプション） */
  .company-info-grid .info-row:last-of-type > .info-value::after {
    content: none;
  }
  .info-row > .info-label,
.info-row > .info-value {
  border-bottom: 0px solid #000000; /* 区切り線を追加 */
  padding-bottom:  10px; /* 線と次の行の間に余白 */
  margin-bottom: 10px; /* 線と次の行の間のマージン */

}


.contact-heading h2  {
  white-space: nowrap;
  /* z-index は既存のままでOK */
 
}
/* =========================================== */
/* .contact-form-link のスタイル */
/* =========================================== */


/* =========================================== */
/* .contact-image-group のスタイル */
/* =========================================== */
.contact-image-group {
  flex-direction: column; /* 画像グループ内のアイテムを縦に並べる */
  align-items: right; /* 中央揃え */
  width: 100%; /* 親要素の幅いっぱいに広げる */
  margin-top: 0; /* もしあった場合リセット */
  /* z-index は既存のままでOK */
  display: none;
}


.new-section-content h2 {
 
  margin-right: 60px!important;
  
}



.contact-circle-button {
  position: static; /* 絶対配置を解除し、通常フローに戻す */
  margin-top: 100px; /* 上部にスペースを追加 */
  width: 100px; /* サイズを調整 */
  height: 100px; /* サイズを調整 */
  
}
.contact-mark {
  /* 基本的な形状 */
  width: 150px; /* ✨ マークの幅（大きくするほどマークも大きくなる） */
  height: 150px; /* ✨ マークの高さ（幅と同じにすると円形になる） */
  background-color: #000000; /* ✨ マークの色を黒に設定 */
  border-radius: 50%; /* ✨ 円形にする */

  margin-top: 60px;
 margin-left: 40px;
  /* 中央揃え（マーク内のテキストやアイコン用） */
  display: flex;
  justify-content: center;
  align-items: center;

  /* テキストのスタイル（もしマーク内にテキストを入れる場合） */
  color: #ffffff; /* テキストの色を白に */
  font-size: 1.2em; /* テキストのフォントサイズ */
  font-weight: bold;
  text-align: right;
  line-height: 1.2;
  text-decoration: none; /* リンクにする場合の下線を消す */

  /* オプション: マウスオーバー時の変化 */
  transition: background-color 0.3s ease, transform 0.3s ease;
  cursor: pointer; /* カーソルをポインターにする */
}
 .mark-text
{text-align: center;}
/* マウスオーバー時のスタイル（オプション） */
.contact-mark:hover {
  background-color: #333333; /* ホバーで少し明るい黒に */
  transform: scale(1.05); /* 少し拡大するアニメーション */
}
.contact-description {
  font-size: 2em; /* フォントサイズを小さくして、一行あたりの文字数を減らす */
  line-height: 1.6; /* 行の高さを調整し、読みやすくする */
  word-spacing: 5; /* 単語間のスペースを通常に戻す */
  margin-top: 40px; /* 上部のマージンを調整 */

  text-align: left; /* テキストを中央寄せにする (必要であれば) */
}
/* マーク内のテキストのスタイル（もしテキストを入れる場合） */

.book-icon-container {
  width: auto; /* コンテンツに合わせて幅を自動調整 */
  background-color: transparent; /* モバイルでは背景ボックスを透明に */
  border-radius: 0; /* 角丸も不要に */
  text-align: center; /* アイコンとラベルを中央揃えに */
  margin-left: 0; /* 左マージンをリセット */
 
  position: fixed; /* 画面右上に固定 */
  top: 20%; /* 上からの距離 */
  right: 0px; /* 右からの距離 */
  z-index: 1000; /* 他のコンテンツの上に表示 */
  padding: 10px; /* クリックしやすいようにパディングを追加 */
  box-shadow: none; /* 影をなくす */
 
}

/* --- SVGアイコンのスタイル調整 --- */
.book-icon {
  position: static; /* fixedを解除し、親要素のフローに従う */
  width: 60px; /* アイコンのサイズをモバイル向けに調整 */
  height: auto;
  font-size: 1.8em; /* 影響は少ないですが、念のため調整 */
  right: auto; /* 固定位置の指定を解除 */
  top: auto; /* 固定位置の指定を解除 */
  margin-top: 0; /* マージンをリセット */
  
  /* fillとstrokeの色はそのまま（必要なら変更） */
  fill: #000000; 
  stroke: #000000;
}

/* --- ラベルのスタイル調整 --- */
.icon-label {
  position: static; /* absoluteを解除し、親要素のフローに従う */
  font-size: 0.8em; /* ラベルのフォントサイズを調整 */
  color: #000000;
  font-weight: 400;
  z-index: auto; /* z-indexをリセット */
  top: auto; /* 位置指定を解除 */
  right: auto; /* 位置指定を解除 */
  top:-5px;
  margin-left: 16.3px;
}

}

@media (max-width: 900px)
{
  .new-section-content {
    display: flex;
    flex-direction: column;
    align-items: center;
  
   
   
   margin-top: -300px;
  }
  
  .new-section-content h2 {
    font-size: 3.2em; /* フォントサイズを小さく */
    margin-bottom: 30px; /* 余白も調整 */
    white-space: nowrap; /* モバイルではテキストを折り返す */
    overflow: visible; /* 折り返すので、はみ出し表示は不要 */
    text-overflow: clip; /* 省略表示も不要 */
    text-align: left;
    margin-right: 670px;
    
  }
  .new-section-columns {
    display: flex;
    flex-direction: column;
    width: 100%;
    gap: 20px;
    
  
    
  }
  
  /* ★ここからが修正のポイントです★ */
  /* 左カラム（画像とH2を含む）を縦並びのFlexboxコンテナにする */
  .column-left {
    display: flex; /* ★Flexboxコンテナに設定★ */
    flex-direction: column; /* ★子要素を縦並びにする★ */
    width: 100%;
    gap: 15px; /* 画像とH2の間隔を調整 */
    align-items: center; /* 子要素を水平方向に中央寄せ */
    margin-left: -50px;
    margin-top: 100px;
  }

  /* h2と画像の順序をorderプロパティで制御 */
  .column-left .new-section-image {
    order: 0; /* 画像を一番上に配置 */
    
   
  }
  
  .column-left h2 {
    order: 1; /* 画像の次に配置 */
   word-spacing: 2;
    font-size: 1em;
    text-align: right;
   
   
   
  }



  .column-right {
    order: 2; /* H2の次に配置 */
   
   
    text-align: left;
    margin-top: 250px;
   
    word-spacing: 7;
   
    line-height: 2;
    
  }
  .column-right {
   
    font-size: 1.5em; /* 説明文のフォントサイズを調整 */
    line-height: 2;
    word-spacing: 7;
   
   
   padding-left: 40px;
   padding-right: 10px;
    
    gap:20px
  }

  .column-right p {
    margin-bottom: 60px; /* 段落間の余白をモバイル向けに調整 */
    word-spacing: 7;
 
  }
    
  .fade-in-child  {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 6s ease, transform 6s ease;
    will-change: opacity, transform;
  }
  
  

  
}




@media screen and (max-width: 992px) {
  .contact-content-wrapper {
    flex-direction: column; /* 横並びから縦並びに変更 */
    align-items: center; /* 中央揃え */
    padding: 3rem 5%; /* 左右のパディングを調整 */

  }
  
  
  
  .contact-text-area {
    margin-right: 0; /* マージンをリセット */
    margin-bottom: 4rem; /* 下にマージンを追加 */
    max-width: 100%; /* 全幅を使用 */
    text-align: center; /* テキストを中央寄せ */
  }

  .contact-heading {
    font-size: 3rem; /* 少し小さく */
    text-align: center;
  }

  .contact-description {
    font-size: 1.6rem; /* 少し小さく */
    text-align: center;
  }

  .contact-mark {
    margin: 0 auto 2rem auto; /* 中央寄せ */
  }

  .contact-image-group {
    max-width: 80%; /* 幅を調整 */
  }

  .contact-main-img {
    max-width: 30rem; /* 画像サイズを調整 */
  }

  .contact-sub-img-positioned {
    top: -15rem; /* 位置を調整 */
    right: -3rem; /* 位置を調整 */
    max-width: 20rem; /* 画像サイズを調整 */
  }

  /* カスタムカーソルはモバイルでは非表示にするのが一般的 */
  .circle-cursor {
    display: none;
  }
}

/* スマートフォン (画面幅が768px以下の場合) */
@media screen and (max-width: 768px) {
  .contact-section {
    padding-right: 20px;
  }

  .contact-text-area {
    margin-bottom: 3rem;
  }

  .contact-heading {
    font-size: 2.5rem;
  }

  .contact-description {
    font-size: 1.5rem;
  }

  .contact-image-group {
    max-width: 95%;
  }

  .contact-main-img {
    max-width: 25rem;
  }

  .contact-sub-img-positioned {
    top: -10rem;
    right: -2rem;
    max-width: 15rem;
  }

  /* .book-icon-container の位置をモバイル向けに調整 */
  .book-icon-container {
    top: 10%; /* 上からの距離を調整 */
    right: 5px; /* 右からの距離を調整 */
    padding: 0.8rem;
  }
}

/* 非常に小さいスマートフォン (画面幅が480px以下の場合) */
@media screen and (max-width: 480px) {
  .contact-heading {
    font-size: 2.2rem;
  }

  .contact-description {
    font-size: 1.4rem;
  }

  .contact-main-img {
    max-width: 20rem;
  }

  .contact-sub-img-positioned {
    top: -8rem;
    right: -1rem;
    max-width: 12rem;
  }
}

/* fade-in-child のスタイルは変更なし */
.fade-in-child {
  opacity: 0;
  transform: translateY(30px);
  transition: opacity 1s ease, transform 1s ease;
}

.fade-in-child.visible {
  opacity: 1;
  transform: translateY(0);
}

